const { InlineKeyboard } = require("grammy");
const Message = require("../models/Message");
const User = require("../models/User");
const { detectContactInfo } = require("../middleware");

const sendMessageToProviderConversation = async (conversation, ctx, args) => {
    const [
        providerTelegram,
        providerName,
        providerId,
        isContentManager = false,
    ] = args.args;
    const userTelegram = ctx.from.id;

    const cancelKeyboard = new InlineKeyboard().text(
        "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        "cancel_conversation"
    );

    const promptMessage = await ctx.reply(
        "‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∞–±–æ —Ñ–∞–π–ª) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':",
        { reply_markup: cancelKeyboard }
    );

    while (true) {
        const { update } = await conversation.wait();

        if (update.callback_query?.data === "cancel_conversation") {
            await ctx.answerCallbackQuery();
            await ctx.api.editMessageText(
                ctx.chat.id,
                promptMessage.message_id,
                "‚ö†Ô∏è –î—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
            );
            return;
        }

        try {
            const manager = await User.findOne({ telegramId: userTelegram });
            if (!manager) throw new Error("User not found");
            console.log(`User found: ${manager.alias} (${manager._id})`);

            const msg = new Message({
                from: {
                    id: manager._id,
                    telegramId: userTelegram,
                    name: manager.alias,
                },
                to: {
                    id: providerId,
                    telegramId: providerTelegram,
                    name: providerName,
                },
                text: "",
            });

            if (update.message?.text) {
                const messageText = update.message.text.trim();

                msg.text = messageText;

                if (!isContentManager) {
                    detectContactInfo(
                        messageText,
                        manager.alias,
                        providerName
                    ).catch((err) =>
                        console.error("Contact detection error:", err)
                    );
                }

                //await ctx.api.sendMessage(providerTelegram, messageText);

                await ctx.api.editMessageText(
                    ctx.chat.id,
                    promptMessage.message_id,
                    `‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è *${providerName}* –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!`,
                    {
                        parse_mode: "Markdown",
                    }
                );
            } else if (update.message?.photo) {
                const photoArray = update.message.photo;
                const fileId = photoArray[photoArray.length - 1].file_id;

                msg.text = "[–§–æ—Ç–æ]";

                await ctx.api.sendPhoto(providerTelegram, fileId, {
                    caption: `üì∑ –§–æ—Ç–æ –≤—ñ–¥: ${manager.alias}`,
                });

                await ctx.api.editMessageText(
                    ctx.chat.id,
                    promptMessage.message_id,
                    `‚úÖ –§–æ—Ç–æ –¥–ª—è *${providerName}* –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!`,
                    {
                        parse_mode: "Markdown",
                    }
                );
            } else if (update.message?.document) {
                const document = update.message.document;
                const caption = `üìé –§–∞–π–ª –≤—ñ–¥: ${manager.alias}. ${
                    update.message.caption
                        ? `–ü—ñ–¥–ø–∏—Å: ${update.message.caption}`
                        : ``
                } `;
                const fileId = document.file_id;

                msg.text = "[–§–∞–π–ª]";

                await ctx.api.sendDocument(providerTelegram, fileId, {
                    caption: caption,
                });

                await ctx.api.editMessageText(
                    ctx.chat.id,
                    promptMessage.message_id,
                    `‚úÖ –§–∞–π–ª –¥–ª—è *${providerName}* –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!`,
                    {
                        parse_mode: "Markdown",
                    }
                );
            } else {
                await ctx.reply(
                    "–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∞–±–æ —Ñ–∞–π–ª."
                );
            }

            await msg.save();
            return;
        } catch (error) {
            console.error("Error processing message:", error);
            await ctx.reply(
                "‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            );
            return;
        }
    }
};

module.exports = sendMessageToProviderConversation;
