const { roles } = require("../constants");
const { InlineKeyboard } = require("grammy");
const User = require("../models/User");
const { Manager, Provider } = require("../models");

const generateInviteConversation = async (conversation, ctx, args) => {
  let messageId = null;
  // 1. –ó–∞–ø–∏—Ç—É—î–º–æ —Ä–æ–ª—å
  const roleKeyboard = new InlineKeyboard()
    .text(roles.MANAGER.name, `role:${roles.MANAGER.name}`)
    .text(roles.PROVIDER.name, `role:${roles.PROVIDER.name}`)
    .row()
    .text("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_conversation");

  const message = await ctx.reply("üë§ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", {
    reply_markup: roleKeyboard,
  });
  messageId = message.message_id;

  const roleCtx = await conversation.waitFor(
    "callback_query:data",
    (ctx) =>
      ctx.callbackQuery.data.startsWith("role:") ||
      ctx.callbackQuery.data === "cancel_conversation"
  );

  if (roleCtx.callbackQuery.data === "cancel_conversation") {
    await roleCtx.answerCallbackQuery();
    await ctx.api.editMessageText(
      ctx.chat.id,
      messageId,
      `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.`,
      { parse_mode: "Markdown" }
    );
    return;
  }
  await roleCtx.answerCallbackQuery();
  const role = roleCtx.callbackQuery.data.split(":")[1];

  // 2. –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º

  const nameKeyboard = new InlineKeyboard().text(
    "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
    "cancel_conversation_second_step"
  );

  await ctx.api.editMessageText(
    ctx.chat.id,
    messageId,
    `‚úèÔ∏è –í–∏ –≤–∏–±—Ä–∞–ª–∏ *${role}*. –í–≤–µ–¥—ñ—Ç—å –ø—Å–µ–≤–¥–æ–Ω—ñ–º:`,
    {
      reply_markup: nameKeyboard,
    }
  );

  const nicknameStep = await conversation.wait();

  if (nicknameStep?.callbackQuery?.data === "cancel_conversation_second_step") {
    await nicknameStep.answerCallbackQuery();
    await ctx.api.editMessageText(
      ctx.chat.id,
      messageId,
      `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  if (!nicknameStep.message?.text) {
    return await ctx.reply("‚ö†Ô∏è –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
  }

  const nickname = nicknameStep.message.text.trim();

  // 3. –í–∞–ª—ñ–¥–∞—Ü—ñ—è
  if (role !== roles.MANAGER.name && role !== roles.PROVIDER.name) {
    return await ctx.reply("‚ùóÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ä–æ–ª—å.");
  }

  const existing = await User.findOne({ alias: nickname });
  if (existing) {
    return await ctx.reply(
      `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–æ–º "${nickname}" –≤–∂–µ —ñ—Å–Ω—É—î.`
    );
  }

  // 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–≤–∞–π—Ç–∞
  const code = Math.random().toString(36).substring(2, 8).toUpperCase();

  // 5.–°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–¥–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ

  if (role === roles.PROVIDER.name) {
    const managers = await User.find({
      role: roles.MANAGER.name,
      telegramId: { $ne: null },
    });
    if (managers.length === 0) {
      return await ctx.reply("‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.");
    }

    const managersKeyboard = new InlineKeyboard();

    managers.forEach((manager) => {
      managersKeyboard.text(
        manager.alias,
        `managers_list:${manager._id}/${manager.alias}/${manager.telegramId}`
      );
      managersKeyboard.row();
    });

    managersKeyboard.text("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_conversation_managers");
    await ctx.api.editMessageText(
      ctx.chat.id,
      messageId,
      `üë• –í–∏–±–µ—Ä—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ *${nickname}* `,
      {
        reply_markup: managersKeyboard,
      }
    );

    const managerCtx = await conversation.waitFor(
      "callback_query:data",
      (ctx) =>
        ctx.callbackQuery.data.startsWith("managers_list:") ||
        ctx.callbackQuery.data === "cancel_conversation_managers"
    );

    if (managerCtx.callbackQuery.data === "cancel_conversation_managers") {
      await managerCtx.answerCallbackQuery();
      await ctx.api.editMessageText(
        ctx.chat.id,
        messageId,
        `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    await managerCtx.answerCallbackQuery();

    const data = managerCtx.callbackQuery.data.replace("managers_list:", "");
    const [managerId, managerAlias, managerTelegramId] = data.split("/");

    await Provider.create({
      alias: nickname,
      inviteCode: code,
      manager: {
        id: managerId,
        name: managerAlias,
        telegramId: managerTelegramId,
      },
    });
  } else {
    await Manager.create({
      alias: nickname,
      inviteCode: code,
      isAuth: false,
    });
  }

  // 6. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

  await ctx.api.editMessageText(
    ctx.chat.id,
    messageId,
    `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ *${nickname}* —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä–æ–ª–ª—é *${role}*.`,
    { parse_mode: "Markdown" }
  );

  await ctx.reply(
    `‚úÖ –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ü–µ–π —ñ–Ω–≤–∞–π—Ç *${nickname}*:\n\`\`\`\nhttps://t.me/@Manager_handler_bot?start=JOIN-${code}\n\`\`\``,
    { parse_mode: "Markdown" }
  );
};

module.exports = generateInviteConversation;
