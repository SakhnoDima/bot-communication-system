const User = require("../models/User");
const { roles } = require("../constants");
const { adminKeyboard, managerKeyboard } = require("../keyboards");

module.exports = (bot) => {
  bot.command("start", async (ctx) => {
    const { id: userTelegramId } = ctx.update.message.from;
    const args = ctx.message.text.split(" ");
    const payload = args[1];

    if (!ctx.from) {
      return ctx.reply(
        "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
      );
    }
    // console.log(userTelegramId);
    // console.log(ctx.update.message.from);

    // Check if the user is ADMIN
    if (userTelegramId === roles.ADMIN.id) {
      ctx.session.role = roles.ADMIN.name;
      return await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", {
        reply_markup: adminKeyboard,
      });
    }

    // User authentication
    if (payload && payload.startsWith("JOIN-")) {
      const inviteCode = payload.split("JOIN-")[1];

      try {
        const user = await User.findOne({
          $or: [{ telegramId: ctx.from.id.toString() }, { inviteCode }],
        });

        if (!user) {
          return ctx.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–≤–∞–π—Ç-–∫–æ–¥.");
        }

        if (user.telegramId) {
          return ctx.reply(
            "‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –±—É–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
          );
        }

        user.telegramId = ctx.from.id.toString();
        user.name = ctx.from.first_name || "Unknown User";
        user.isAuth = true;
        await user.save();

        ctx.session.role = user.role;

        ctx.reply(`üéâ –í—ñ—Ç–∞—é ${user.name}, –≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!`);

        if (user.role === roles.ADMIN) {
          return await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", {
            reply_markup: adminKeyboard,
          });
        }

        if (user.role === roles.PROVIDER) {
          return await ctx.reply(
            "–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
          );
        }
      } catch (error) {
        console.log("User authentication error. Error:", error);
        return ctx.reply(
          "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        );
      }
    }

    // Check user role
    try {
      const user = await User.findOne({ telegramId: ctx.from.id.toString() });

      if (!user) {
        return ctx.reply(
          "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–≤–∞–π—Ç-–∫–æ–¥—É."
        );
      }

      if (user.role === roles.MANAGER.name) {
        ctx.session.role = roles.MANAGER.name;
        return await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", {
          reply_markup: managerKeyboard,
        });
      } else if (user.role === roles.PROVIDER.name) {
        ctx.session.role = roles.PROVIDER.name;
        return await ctx.reply(
          "–î–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        );
      } else {
        return ctx.reply("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
      }
    } catch (error) {
      console.log("Check user role. Error:", error);
      return ctx.reply(
        "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
      );
    }
  });
};
