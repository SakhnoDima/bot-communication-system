const { InlineKeyboard } = require("grammy");
const User = require("../models/User");
const { roles } = require("../constants");

const keyboard = new InlineKeyboard()
  .text("–ê–¥–º—ñ–Ω", `select_role:${roles.ADMIN.name}`)
  .row()
  .text("–ú–µ–Ω–µ–¥–∂–µ—Ä", `select_role:${roles.MANAGER.name}`)
  .row()
  .text("–°–∫–ª–∞–¥", `select_role:${roles.PROVIDER.name}`);

const adminKeyboard = new InlineKeyboard()
  .text("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", `generate_invite`)
  .row()
  .text("–°–ø–∏—Å–æ–∫ –°–∫–ª–∞–¥—ñ–≤", `providers_list`);

const managerKeyboard = new InlineKeyboard().text(
  "–°–ø–∏—Å–æ–∫ –°–∫–ª–∞–¥—ñ–≤",
  `providers_list`
);

module.exports = (bot) => {
  bot.command("start", async (ctx) => {
    const args = ctx.message.text.split(" ");
    const payload = args[1];

    if (payload && payload.startsWith("JOIN-")) {
      const inviteCode = payload.split("JOIN-")[1];

      const provider = await User.findOne({ inviteCode });

      if (!provider) {
        return ctx.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–≤–∞–π—Ç-–∫–æ–¥.");
      }

      if (provider.isAuth) {
        return ctx.reply(
          "‚ö†Ô∏è –¶–µ–π —ñ–Ω–≤–∞–π—Ç –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        );
      }
      provider.telegramId = ctx.from.id.toString();
      provider.name = ctx.from.first_name;
      provider.isAuth = true;
      await provider.save();

      ctx.session.role = roles.PROVIDER.name;

      return ctx.reply(`üéâ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!`);
    }

    await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", {
      reply_markup: keyboard,
    });
  });

  bot.callbackQuery(/^select_role:(.+)$/, async (ctx) => {
    const userId = ctx.from.id;
    const selectedRole = ctx.match[1];

    await ctx.answerCallbackQuery();
    await ctx.reply(`‚úÖ –í–∏ –∏–±—Ä–∞–ª–∏ —Ä–æ–ª—å: ${selectedRole}`);

    if (selectedRole === roles.ADMIN.name && userId === roles.ADMIN.id) {
      await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", {
        reply_markup: adminKeyboard,
      });
      ctx.session.role = selectedRole;
    } else if (
      selectedRole === roles.MANAGER.name &&
      userId === roles.MANAGER.id
    ) {
      await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", {
        reply_markup: managerKeyboard,
      });
      ctx.session.role = selectedRole;
    } else if (
      selectedRole === roles.PROVIDER.name &&
      userId !== roles.ADMIN.id &&
      userId !== roles.MANAGER.id
    ) {
      await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:", {
        reply_markup: managerKeyboard,
      });
      ctx.session.role = selectedRole;
    } else {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.");
    }
  });
};
